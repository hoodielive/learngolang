Notes

1. How do we run the code in the project? 
go run <filename> 

2. What does 'package main' mean? 
Package == Project == Workspace (a collection of common source code files)
First line must declare the project or main file declared that it belongs to
In go there are 2 types of packages: 

    executable and reusable 
    
    executable -> go build main.go :: used to do stuff
    
    resuable -> helper functions and stuff like this

if its package main, then it's executable - any other name is a reusable

3. What does 'import "fmt" mean? 
    main-> |fmt| main-> |math| main-> |encoding| 
    golang.org/pkg (to find packages that expand functionality)


4. What's the func thing? 
    func -> declares a function main
    main -> is the name of the function 
    fmt.Println -> tells it to print arg and return new line
    

5. How is the main.go file organized? 
    if your namespace is 'main' :: it is like a container housing all other 'reusable' code function/snippets 


Consider the following 

package main 

import "fmt" // if this is left off [visual code studio] will put it in there for you

func main() {
    // there are two ways to declare a variable in golang
    1. var card string = "Ace of Spades" 
        or

    2. card := "Ace of Spades" // by inference 
        Keep in mind 
            := is only used on an initial declaration and does not have to be used again on 'assignment' 

        fmt.Println(card) // means pull the print on new line functionality from the fmt package and print the content of card

} 


func newCard() string {
    return "some sort of string" 
} 

Note: you have to tell newCard what 'primitive type' the return statement is to retreive 


package main 

import "fmt" 

func main() { 
    card := "Ace of Spades"
    fmt.Println(card) 
} 

func newCard() string {
    return "Some sort of string" 
} 


#### ARRAY DATA STRUCTURES ### 

There are 2 types of arrays in go

- Array and Slice 

Array -> Fixed length list of things  -> primitive data struct for holding a list of records 
Slice -> An array that can grow or shrink  ->

Every element in slice must be of the same type 

slices are 'zero-indexed'
